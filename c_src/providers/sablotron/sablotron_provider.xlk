/* ``The contents of this file are copyright (C) ncorp llc,
 * Version 1.1, (the "License"); you may not use this file except in
 * compliance with the License. You should have received a copy of the
 * "License" along with this software. If not, it can be
 * retrieved via the world wide web at http://www.....
 *
 * Software distributed under the License is distributed on an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
 * the License for the specific language governing rights and limitations
 * under the License.
 *
 *
 *     $Id$
 */

#include <erlxsl.h>
#include <sablotron/sablot.h>

/*
 * Contains pointers to the various chunks
 * of API data we need for post processing cleanup.
 */
typedef struct async_state {
    SablotSituation situation;
    SablotHandle sHandle;
    SDOM_Document xsl;
    SDOM_Document xml;
} AsyncState;

/* Walks the supplied linked list of params and adds them. */
static void addParametersToSituation(SablotSituation situation,
        SablotHandle sHandle, ParameterInfo* parameters) {

    while (NULL != parameters->next) {
        addParametersToSituation(situation, sHandle, parameters->next);
    }
    SablotAddParam(situation, sHandle, parameters->name, parameters->value);
}

DriverState init_provider() {
    return( Ok );
}

void handle_request(void* response) {
    //TODO: support for file based transforms as well!?
    TransformResponse* result = (TransformResponse*)response;
    RequestContext* context = result->context;
    TransformRequestPtr request = context->request;

    SablotSituation situation;
    SablotHandle sHandle;
    SDOM_Document xsl, xml;

    SablotCreateSituation(&situation);
    SablotParseBuffer(situation, request->inputData, &xml);
    SablotParseStylesheetBuffer(situation, request->stylesheetData, &xsl);
    
    SablotCreateProcessorForSituation(situation, &sHandle);

    SablotAddArgTree(situation, sHandle, "sheet", xsl);
    SablotAddArgTree(situation, sHandle, "data", xml);

    if (NULL != request->parameters) {
        addParametersToSituation(situation, sHandle, request->parameters);
    }

    SablotRunProcessorGen(situation, sHandle, "arg:/sheet", "arg:/data", "arg:/out");

    SablotGetResultArg(sHandle, "arg:/out", &(result->payload.buffer));

    result->responseFormat = Buffer;

    AsyncState* asyncState = malloc(sizeof(AsyncState));
    if (NULL == asyncState) {
        request->status = ProviderError;
        return;
    }

    asyncState->situation = situation;
    asyncState->sHandle = sHandle;
    asyncState->xml = xml;
    asyncState->xsl = xsl;

    result->externalData = asyncState;
}

DriverState post_handle_request(void* response) {
    TransformResponse* result = (TransformResponse*)response;
    AsyncState* asyncState = result->externalData;
    if (NULL == asyncState) {
        //TODO: figure out what this means?
        return( ProviderError );
    }

    SablotSituation situation = asyncState->situation;
    SablotFree(result->payload.buffer);
    SablotDestroyDocument(situation, asyncState->xsl);
    SablotDestroyDocument(situation, asyncState->xml);
    SablotDestroyProcessor(asyncState->sHandle);
    SablotDestroySituation(situation);
    return( Ok );
}

/*
 * Gives the implementation provider a change to cleanup.
 */
void destroy_provider() {}
